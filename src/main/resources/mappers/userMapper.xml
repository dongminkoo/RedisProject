<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.personal.redisProject.mapper.UserMapper">

    <resultMap id="userMap" type="UserDTO">
        <result column="ID" property="id"/>
        <result column="USER_ID" property="userID"/>
        <result column="USER_PW" property="password"/>
        <result column="USER_NM" property="nickName"/>
        <result column="ADMIN_YN" property="isAdmin"/>
        <result column="WITHDRAW_YN" property="isWithDraw"/>
        <result column="CRT_DT" property="createTime"/>
        <result column="UPD_DT" property="updateTime"/>
        <result column="STATUS" property="status"/>
    </resultMap>

    <!-- id 값으로 User 정보 가져오기    -->
    <select id="getUserProfile" resultMap="userMap">
        SELECT
            ID,
            USER_ID,
            USER_PW,
            USER_NM,
            WITHDRAW_YN,
            CRT_DT,
            STATUS
        FROM
            USER
        WHERE
            USER_ID = #{userID}
    </select>

    <!-- User 정보 저장   -->
    <insert id="insertUserProfile" parameterType="UserDTO">
        INSERT INTO USER (
            USER_ID,
            USER_PW,
            USER_NM,
            ADMIN_YN,
            WITHDRAW_YN,
            STATUS
        ) VALUES (
            #{userID},
            #{password},
            #{nickName},
            #{isAdmin},
            #{isWithDraw},
            #{status}
        )
    </insert>

    <!-- User 정보 업데이트   -->
    <update id="updateUserProfile" parameterType="UserDTO">
        UPDATE
            USER
        SET
            USER_PW = #{password},
            USER_NM = #{nickName},
            WITHDRAW_YN = #{isWithDraw},
            STATUS = #{status},
--             UPD_DT = NOW()
        WHERE
            ID = #{id}
    </update>

    <!-- User 정보 삭제   -->
    <delete id="deleteUserProfile" parameterType="UserDTO">
        DELETE FROM
            USER
        WHERE
            ID = #{id}
    </delete>

    <!-- User 정보 등록   -->
    <insert id="register" parameterType="UserDTO">
        INSERT INTO USER (
            USER_ID,
            USER_PW,
            USER_NM,
            CRT_DT,
            WITHDRAW_YN,
            STATUS
        ) VALUES (
            #{userID},
            #{password},
            #{nickName},
            #{createTime},
            #{isWithDraw},
            #{status}
        )
    </insert>

    <!-- Id 와 password 로 User 정보 찾기 + status 가 Delete가 아닐 때   -->
    <select id="findByIdAndPassword" resultMap="userMap">
        SELECT
            ID,
            USER_ID,
            USER_PW,
            USER_NM,
            WITHDRAW_YN,
            CRT_DT,
            STATUS
        FROM
            USER
        WHERE
            ID = #{id}
        AND
            USER_PW = #{password}
        AND
            STATUS != 'DELETE'
    </select>

    <!-- userId 와 password 로 User 정보 찾기 -->
    <select id="findByUserIdAndPassword" resultMap="userMap">
        SELECT
            ID,
            USER_ID,
            USER_PW,
            USER_NM,
            WITHDRAW_YN,
            CRT_DT,
            STATUS
        FROM
            USER
        WHERE
            USER_ID = #{userID}
        AND
            USER_PW = #{password}
          AND
            STATUS != 'DELETE'
    </select>

    <!-- id 중복 확인 -->
    <select id="idCheck" resultType="int">
        SELECT
            COUNT(ID)
        FROM
            USER
        WHERE
            ID = #{id}
    </select>

    <!-- password 변경 업데이트 -->
    <update id="updatePassword" parameterType="UserDTO">
        UPDATE
            USER
        SET
            USER_PW = #{password}
        WHERE
            USER_ID = #{userID}
    </update>
</mapper>